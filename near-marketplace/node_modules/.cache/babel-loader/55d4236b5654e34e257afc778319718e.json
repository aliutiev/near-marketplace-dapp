{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KeyPairEd25519 = exports.KeyPair = exports.PublicKey = exports.KeyType = void 0;\n\nconst tweetnacl_1 = __importDefault(require(\"tweetnacl\"));\n\nconst serialize_1 = require(\"./serialize\");\n\nconst enums_1 = require(\"./enums\");\n/** All supported key types */\n\n\nvar KeyType;\n\n(function (KeyType) {\n  KeyType[KeyType[\"ED25519\"] = 0] = \"ED25519\";\n})(KeyType = exports.KeyType || (exports.KeyType = {}));\n\nfunction key_type_to_str(keyType) {\n  switch (keyType) {\n    case KeyType.ED25519:\n      return 'ed25519';\n\n    default:\n      throw new Error(`Unknown key type ${keyType}`);\n  }\n}\n\nfunction str_to_key_type(keyType) {\n  switch (keyType.toLowerCase()) {\n    case 'ed25519':\n      return KeyType.ED25519;\n\n    default:\n      throw new Error(`Unknown key type ${keyType}`);\n  }\n}\n/**\n * PublicKey representation that has type and bytes of the key.\n */\n\n\nclass PublicKey extends enums_1.Assignable {\n  static from(value) {\n    if (typeof value === 'string') {\n      return PublicKey.fromString(value);\n    }\n\n    return value;\n  }\n\n  static fromString(encodedKey) {\n    const parts = encodedKey.split(':');\n\n    if (parts.length === 1) {\n      return new PublicKey({\n        keyType: KeyType.ED25519,\n        data: serialize_1.base_decode(parts[0])\n      });\n    } else if (parts.length === 2) {\n      return new PublicKey({\n        keyType: str_to_key_type(parts[0]),\n        data: serialize_1.base_decode(parts[1])\n      });\n    } else {\n      throw new Error('Invalid encoded key format, must be <curve>:<encoded key>');\n    }\n  }\n\n  toString() {\n    return `${key_type_to_str(this.keyType)}:${serialize_1.base_encode(this.data)}`;\n  }\n\n  verify(message, signature) {\n    switch (this.keyType) {\n      case KeyType.ED25519:\n        return tweetnacl_1.default.sign.detached.verify(message, signature, this.data);\n\n      default:\n        throw new Error(`Unknown key type ${this.keyType}`);\n    }\n  }\n\n}\n\nexports.PublicKey = PublicKey;\n\nclass KeyPair {\n  /**\n   * @param curve Name of elliptical curve, case-insensitive\n   * @returns Random KeyPair based on the curve\n   */\n  static fromRandom(curve) {\n    switch (curve.toUpperCase()) {\n      case 'ED25519':\n        return KeyPairEd25519.fromRandom();\n\n      default:\n        throw new Error(`Unknown curve ${curve}`);\n    }\n  }\n\n  static fromString(encodedKey) {\n    const parts = encodedKey.split(':');\n\n    if (parts.length === 1) {\n      return new KeyPairEd25519(parts[0]);\n    } else if (parts.length === 2) {\n      switch (parts[0].toUpperCase()) {\n        case 'ED25519':\n          return new KeyPairEd25519(parts[1]);\n\n        default:\n          throw new Error(`Unknown curve: ${parts[0]}`);\n      }\n    } else {\n      throw new Error('Invalid encoded key format, must be <curve>:<encoded key>');\n    }\n  }\n\n}\n\nexports.KeyPair = KeyPair;\n/**\n * This class provides key pair functionality for Ed25519 curve:\n * generating key pairs, encoding key pairs, signing and verifying.\n */\n\nclass KeyPairEd25519 extends KeyPair {\n  /**\n   * Construct an instance of key pair given a secret key.\n   * It's generally assumed that these are encoded in base58.\n   * @param {string} secretKey\n   */\n  constructor(secretKey) {\n    super();\n    const keyPair = tweetnacl_1.default.sign.keyPair.fromSecretKey(serialize_1.base_decode(secretKey));\n    this.publicKey = new PublicKey({\n      keyType: KeyType.ED25519,\n      data: keyPair.publicKey\n    });\n    this.secretKey = secretKey;\n  }\n  /**\n   * Generate a new random keypair.\n   * @example\n   * const keyRandom = KeyPair.fromRandom();\n   * keyRandom.publicKey\n   * // returns [PUBLIC_KEY]\n   *\n   * keyRandom.secretKey\n   * // returns [SECRET_KEY]\n   */\n\n\n  static fromRandom() {\n    const newKeyPair = tweetnacl_1.default.sign.keyPair();\n    return new KeyPairEd25519(serialize_1.base_encode(newKeyPair.secretKey));\n  }\n\n  sign(message) {\n    const signature = tweetnacl_1.default.sign.detached(message, serialize_1.base_decode(this.secretKey));\n    return {\n      signature,\n      publicKey: this.publicKey\n    };\n  }\n\n  verify(message, signature) {\n    return this.publicKey.verify(message, signature);\n  }\n\n  toString() {\n    return `ed25519:${this.secretKey}`;\n  }\n\n  getPublicKey() {\n    return this.publicKey;\n  }\n\n}\n\nexports.KeyPairEd25519 = KeyPairEd25519;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","KeyPairEd25519","KeyPair","PublicKey","KeyType","tweetnacl_1","require","serialize_1","enums_1","key_type_to_str","keyType","ED25519","Error","str_to_key_type","toLowerCase","Assignable","from","fromString","encodedKey","parts","split","length","data","base_decode","toString","base_encode","verify","message","signature","default","sign","detached","fromRandom","curve","toUpperCase","constructor","secretKey","keyPair","fromSecretKey","publicKey","newKeyPair","getPublicKey"],"sources":["C:/Projects/near-marketplace-dapp/near-marketplace/node_modules/near-api-js/lib/utils/key_pair.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyPairEd25519 = exports.KeyPair = exports.PublicKey = exports.KeyType = void 0;\nconst tweetnacl_1 = __importDefault(require(\"tweetnacl\"));\nconst serialize_1 = require(\"./serialize\");\nconst enums_1 = require(\"./enums\");\n/** All supported key types */\nvar KeyType;\n(function (KeyType) {\n    KeyType[KeyType[\"ED25519\"] = 0] = \"ED25519\";\n})(KeyType = exports.KeyType || (exports.KeyType = {}));\nfunction key_type_to_str(keyType) {\n    switch (keyType) {\n        case KeyType.ED25519: return 'ed25519';\n        default: throw new Error(`Unknown key type ${keyType}`);\n    }\n}\nfunction str_to_key_type(keyType) {\n    switch (keyType.toLowerCase()) {\n        case 'ed25519': return KeyType.ED25519;\n        default: throw new Error(`Unknown key type ${keyType}`);\n    }\n}\n/**\n * PublicKey representation that has type and bytes of the key.\n */\nclass PublicKey extends enums_1.Assignable {\n    static from(value) {\n        if (typeof value === 'string') {\n            return PublicKey.fromString(value);\n        }\n        return value;\n    }\n    static fromString(encodedKey) {\n        const parts = encodedKey.split(':');\n        if (parts.length === 1) {\n            return new PublicKey({ keyType: KeyType.ED25519, data: serialize_1.base_decode(parts[0]) });\n        }\n        else if (parts.length === 2) {\n            return new PublicKey({ keyType: str_to_key_type(parts[0]), data: serialize_1.base_decode(parts[1]) });\n        }\n        else {\n            throw new Error('Invalid encoded key format, must be <curve>:<encoded key>');\n        }\n    }\n    toString() {\n        return `${key_type_to_str(this.keyType)}:${serialize_1.base_encode(this.data)}`;\n    }\n    verify(message, signature) {\n        switch (this.keyType) {\n            case KeyType.ED25519: return tweetnacl_1.default.sign.detached.verify(message, signature, this.data);\n            default: throw new Error(`Unknown key type ${this.keyType}`);\n        }\n    }\n}\nexports.PublicKey = PublicKey;\nclass KeyPair {\n    /**\n     * @param curve Name of elliptical curve, case-insensitive\n     * @returns Random KeyPair based on the curve\n     */\n    static fromRandom(curve) {\n        switch (curve.toUpperCase()) {\n            case 'ED25519': return KeyPairEd25519.fromRandom();\n            default: throw new Error(`Unknown curve ${curve}`);\n        }\n    }\n    static fromString(encodedKey) {\n        const parts = encodedKey.split(':');\n        if (parts.length === 1) {\n            return new KeyPairEd25519(parts[0]);\n        }\n        else if (parts.length === 2) {\n            switch (parts[0].toUpperCase()) {\n                case 'ED25519': return new KeyPairEd25519(parts[1]);\n                default: throw new Error(`Unknown curve: ${parts[0]}`);\n            }\n        }\n        else {\n            throw new Error('Invalid encoded key format, must be <curve>:<encoded key>');\n        }\n    }\n}\nexports.KeyPair = KeyPair;\n/**\n * This class provides key pair functionality for Ed25519 curve:\n * generating key pairs, encoding key pairs, signing and verifying.\n */\nclass KeyPairEd25519 extends KeyPair {\n    /**\n     * Construct an instance of key pair given a secret key.\n     * It's generally assumed that these are encoded in base58.\n     * @param {string} secretKey\n     */\n    constructor(secretKey) {\n        super();\n        const keyPair = tweetnacl_1.default.sign.keyPair.fromSecretKey(serialize_1.base_decode(secretKey));\n        this.publicKey = new PublicKey({ keyType: KeyType.ED25519, data: keyPair.publicKey });\n        this.secretKey = secretKey;\n    }\n    /**\n     * Generate a new random keypair.\n     * @example\n     * const keyRandom = KeyPair.fromRandom();\n     * keyRandom.publicKey\n     * // returns [PUBLIC_KEY]\n     *\n     * keyRandom.secretKey\n     * // returns [SECRET_KEY]\n     */\n    static fromRandom() {\n        const newKeyPair = tweetnacl_1.default.sign.keyPair();\n        return new KeyPairEd25519(serialize_1.base_encode(newKeyPair.secretKey));\n    }\n    sign(message) {\n        const signature = tweetnacl_1.default.sign.detached(message, serialize_1.base_decode(this.secretKey));\n        return { signature, publicKey: this.publicKey };\n    }\n    verify(message, signature) {\n        return this.publicKey.verify(message, signature);\n    }\n    toString() {\n        return `ed25519:${this.secretKey}`;\n    }\n    getPublicKey() {\n        return this.publicKey;\n    }\n}\nexports.KeyPairEd25519 = KeyPairEd25519;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}