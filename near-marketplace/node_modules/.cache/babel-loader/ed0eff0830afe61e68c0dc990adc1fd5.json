{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MergeKeyStore = void 0;\n\nconst keystore_1 = require(\"./keystore\");\n\nclass MergeKeyStore extends keystore_1.KeyStore {\n  /**\n   * @param keyStores read calls are attempted from start to end of array\n   * @param options.writeKeyStoreIndex the keystore index that will receive all write calls\n   */\n  constructor(keyStores) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      writeKeyStoreIndex: 0\n    };\n    super();\n    this.options = options;\n    this.keyStores = keyStores;\n  }\n  /**\n   * Store a {@link KeyPain} to the first index of a key store array\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   * @param keyPair The key pair to store in local storage\n   */\n\n\n  async setKey(networkId, accountId, keyPair) {\n    await this.keyStores[this.options.writeKeyStoreIndex].setKey(networkId, accountId, keyPair);\n  }\n  /**\n   * Gets a {@link KeyPair} from the array of key stores\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   * @returns {Promise<KeyPair>}\n   */\n\n\n  async getKey(networkId, accountId) {\n    for (const keyStore of this.keyStores) {\n      const keyPair = await keyStore.getKey(networkId, accountId);\n\n      if (keyPair) {\n        return keyPair;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Removes a {@link KeyPair} from the array of key stores\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   */\n\n\n  async removeKey(networkId, accountId) {\n    for (const keyStore of this.keyStores) {\n      await keyStore.removeKey(networkId, accountId);\n    }\n  }\n  /**\n   * Removes all items from each key store\n   */\n\n\n  async clear() {\n    for (const keyStore of this.keyStores) {\n      await keyStore.clear();\n    }\n  }\n  /**\n   * Get the network(s) from the array of key stores\n   * @returns {Promise<string[]>}\n   */\n\n\n  async getNetworks() {\n    const result = new Set();\n\n    for (const keyStore of this.keyStores) {\n      for (const network of await keyStore.getNetworks()) {\n        result.add(network);\n      }\n    }\n\n    return Array.from(result);\n  }\n  /**\n   * Gets the account(s) from the array of key stores\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @returns{Promise<string[]>}\n   */\n\n\n  async getAccounts(networkId) {\n    const result = new Set();\n\n    for (const keyStore of this.keyStores) {\n      for (const account of await keyStore.getAccounts(networkId)) {\n        result.add(account);\n      }\n    }\n\n    return Array.from(result);\n  }\n  /** @hidden */\n\n\n  toString() {\n    return `MergeKeyStore(${this.keyStores.join(', ')})`;\n  }\n\n}\n\nexports.MergeKeyStore = MergeKeyStore;","map":{"version":3,"names":["Object","defineProperty","exports","value","MergeKeyStore","keystore_1","require","KeyStore","constructor","keyStores","options","writeKeyStoreIndex","setKey","networkId","accountId","keyPair","getKey","keyStore","removeKey","clear","getNetworks","result","Set","network","add","Array","from","getAccounts","account","toString","join"],"sources":["C:/Projects/node_modules/near-api-js/lib/key_stores/merge_key_store.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MergeKeyStore = void 0;\nconst keystore_1 = require(\"./keystore\");\nclass MergeKeyStore extends keystore_1.KeyStore {\n    /**\n     * @param keyStores read calls are attempted from start to end of array\n     * @param options.writeKeyStoreIndex the keystore index that will receive all write calls\n     */\n    constructor(keyStores, options = { writeKeyStoreIndex: 0 }) {\n        super();\n        this.options = options;\n        this.keyStores = keyStores;\n    }\n    /**\n     * Store a {@link KeyPain} to the first index of a key store array\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @param keyPair The key pair to store in local storage\n     */\n    async setKey(networkId, accountId, keyPair) {\n        await this.keyStores[this.options.writeKeyStoreIndex].setKey(networkId, accountId, keyPair);\n    }\n    /**\n     * Gets a {@link KeyPair} from the array of key stores\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */\n    async getKey(networkId, accountId) {\n        for (const keyStore of this.keyStores) {\n            const keyPair = await keyStore.getKey(networkId, accountId);\n            if (keyPair) {\n                return keyPair;\n            }\n        }\n        return null;\n    }\n    /**\n     * Removes a {@link KeyPair} from the array of key stores\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */\n    async removeKey(networkId, accountId) {\n        for (const keyStore of this.keyStores) {\n            await keyStore.removeKey(networkId, accountId);\n        }\n    }\n    /**\n     * Removes all items from each key store\n     */\n    async clear() {\n        for (const keyStore of this.keyStores) {\n            await keyStore.clear();\n        }\n    }\n    /**\n     * Get the network(s) from the array of key stores\n     * @returns {Promise<string[]>}\n     */\n    async getNetworks() {\n        const result = new Set();\n        for (const keyStore of this.keyStores) {\n            for (const network of await keyStore.getNetworks()) {\n                result.add(network);\n            }\n        }\n        return Array.from(result);\n    }\n    /**\n     * Gets the account(s) from the array of key stores\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns{Promise<string[]>}\n     */\n    async getAccounts(networkId) {\n        const result = new Set();\n        for (const keyStore of this.keyStores) {\n            for (const account of await keyStore.getAccounts(networkId)) {\n                result.add(account);\n            }\n        }\n        return Array.from(result);\n    }\n    /** @hidden */\n    toString() {\n        return `MergeKeyStore(${this.keyStores.join(', ')})`;\n    }\n}\nexports.MergeKeyStore = MergeKeyStore;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwB,KAAK,CAA7B;;AACA,MAAMC,UAAU,GAAGC,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMF,aAAN,SAA4BC,UAAU,CAACE,QAAvC,CAAgD;EAC5C;AACJ;AACA;AACA;EACIC,WAAW,CAACC,SAAD,EAAiD;IAAA,IAArCC,OAAqC,uEAA3B;MAAEC,kBAAkB,EAAE;IAAtB,CAA2B;IACxD;IACA,KAAKD,OAAL,GAAeA,OAAf;IACA,KAAKD,SAAL,GAAiBA,SAAjB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACgB,MAANG,MAAM,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,OAAvB,EAAgC;IACxC,MAAM,KAAKN,SAAL,CAAe,KAAKC,OAAL,CAAaC,kBAA5B,EAAgDC,MAAhD,CAAuDC,SAAvD,EAAkEC,SAAlE,EAA6EC,OAA7E,CAAN;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACgB,MAANC,MAAM,CAACH,SAAD,EAAYC,SAAZ,EAAuB;IAC/B,KAAK,MAAMG,QAAX,IAAuB,KAAKR,SAA5B,EAAuC;MACnC,MAAMM,OAAO,GAAG,MAAME,QAAQ,CAACD,MAAT,CAAgBH,SAAhB,EAA2BC,SAA3B,CAAtB;;MACA,IAAIC,OAAJ,EAAa;QACT,OAAOA,OAAP;MACH;IACJ;;IACD,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACmB,MAATG,SAAS,CAACL,SAAD,EAAYC,SAAZ,EAAuB;IAClC,KAAK,MAAMG,QAAX,IAAuB,KAAKR,SAA5B,EAAuC;MACnC,MAAMQ,QAAQ,CAACC,SAAT,CAAmBL,SAAnB,EAA8BC,SAA9B,CAAN;IACH;EACJ;EACD;AACJ;AACA;;;EACe,MAALK,KAAK,GAAG;IACV,KAAK,MAAMF,QAAX,IAAuB,KAAKR,SAA5B,EAAuC;MACnC,MAAMQ,QAAQ,CAACE,KAAT,EAAN;IACH;EACJ;EACD;AACJ;AACA;AACA;;;EACqB,MAAXC,WAAW,GAAG;IAChB,MAAMC,MAAM,GAAG,IAAIC,GAAJ,EAAf;;IACA,KAAK,MAAML,QAAX,IAAuB,KAAKR,SAA5B,EAAuC;MACnC,KAAK,MAAMc,OAAX,IAAsB,MAAMN,QAAQ,CAACG,WAAT,EAA5B,EAAoD;QAChDC,MAAM,CAACG,GAAP,CAAWD,OAAX;MACH;IACJ;;IACD,OAAOE,KAAK,CAACC,IAAN,CAAWL,MAAX,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACqB,MAAXM,WAAW,CAACd,SAAD,EAAY;IACzB,MAAMQ,MAAM,GAAG,IAAIC,GAAJ,EAAf;;IACA,KAAK,MAAML,QAAX,IAAuB,KAAKR,SAA5B,EAAuC;MACnC,KAAK,MAAMmB,OAAX,IAAsB,MAAMX,QAAQ,CAACU,WAAT,CAAqBd,SAArB,CAA5B,EAA6D;QACzDQ,MAAM,CAACG,GAAP,CAAWI,OAAX;MACH;IACJ;;IACD,OAAOH,KAAK,CAACC,IAAN,CAAWL,MAAX,CAAP;EACH;EACD;;;EACAQ,QAAQ,GAAG;IACP,OAAQ,iBAAgB,KAAKpB,SAAL,CAAeqB,IAAf,CAAoB,IAApB,CAA0B,GAAlD;EACH;;AAlF2C;;AAoFhD5B,OAAO,CAACE,aAAR,GAAwBA,aAAxB"},"metadata":{},"sourceType":"script"}