{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InMemoryKeyStore = void 0;\n\nconst keystore_1 = require(\"./keystore\");\n\nconst key_pair_1 = require(\"../utils/key_pair\");\n/**\n * Simple in-memory keystore for mainly for testing purposes.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store}\n * @example\n * ```js\n * import { connect, keyStores, utils } from 'near-api-js';\n *\n * const privateKey = '.......';\n * const keyPair = utils.KeyPair.fromString(privateKey);\n *\n * const keyStore = new keyStores.InMemoryKeyStore();\n * keyStore.setKey('testnet', 'example-account.testnet', keyPair);\n *\n * const config = {\n *   keyStore, // instance of InMemoryKeyStore\n *   networkId: 'testnet',\n *   nodeUrl: 'https://rpc.testnet.near.org',\n *   walletUrl: 'https://wallet.testnet.near.org',\n *   helperUrl: 'https://helper.testnet.near.org',\n *   explorerUrl: 'https://explorer.testnet.near.org'\n * };\n *\n * // inside an async function\n * const near = await connect(config)\n * ```\n */\n\n\nclass InMemoryKeyStore extends keystore_1.KeyStore {\n  constructor() {\n    super();\n    this.keys = {};\n  }\n  /**\n   * Stores a {@KeyPair} in in-memory storage item\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   * @param keyPair The key pair to store in local storage\n   */\n\n\n  async setKey(networkId, accountId, keyPair) {\n    this.keys[`${accountId}:${networkId}`] = keyPair.toString();\n  }\n  /**\n   * Gets a {@link KeyPair} from in-memory storage\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   * @returns {Promise<KeyPair>}\n   */\n\n\n  async getKey(networkId, accountId) {\n    const value = this.keys[`${accountId}:${networkId}`];\n\n    if (!value) {\n      return null;\n    }\n\n    return key_pair_1.KeyPair.fromString(value);\n  }\n  /**\n   * Removes a {@link KeyPair} from in-memory storage\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   */\n\n\n  async removeKey(networkId, accountId) {\n    delete this.keys[`${accountId}:${networkId}`];\n  }\n  /**\n   * Removes all {@link KeyPairs} from in-memory storage\n   */\n\n\n  async clear() {\n    this.keys = {};\n  }\n  /**\n   * Get the network(s) from in-memory storage\n   * @returns {Promise<string[]>}\n   */\n\n\n  async getNetworks() {\n    const result = new Set();\n    Object.keys(this.keys).forEach(key => {\n      const parts = key.split(':');\n      result.add(parts[1]);\n    });\n    return Array.from(result.values());\n  }\n  /**\n   * Gets the account(s) from in-memory storage\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @returns{Promise<string[]>}\n   */\n\n\n  async getAccounts(networkId) {\n    const result = new Array();\n    Object.keys(this.keys).forEach(key => {\n      const parts = key.split(':');\n\n      if (parts[parts.length - 1] === networkId) {\n        result.push(parts.slice(0, parts.length - 1).join(':'));\n      }\n    });\n    return result;\n  }\n  /** @hidden */\n\n\n  toString() {\n    return 'InMemoryKeyStore';\n  }\n\n}\n\nexports.InMemoryKeyStore = InMemoryKeyStore;","map":{"version":3,"names":["Object","defineProperty","exports","value","InMemoryKeyStore","keystore_1","require","key_pair_1","KeyStore","constructor","keys","setKey","networkId","accountId","keyPair","toString","getKey","KeyPair","fromString","removeKey","clear","getNetworks","result","Set","forEach","key","parts","split","add","Array","from","values","getAccounts","length","push","slice","join"],"sources":["C:/Projects/node_modules/near-api-js/lib/key_stores/in_memory_key_store.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InMemoryKeyStore = void 0;\nconst keystore_1 = require(\"./keystore\");\nconst key_pair_1 = require(\"../utils/key_pair\");\n/**\n * Simple in-memory keystore for mainly for testing purposes.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store}\n * @example\n * ```js\n * import { connect, keyStores, utils } from 'near-api-js';\n *\n * const privateKey = '.......';\n * const keyPair = utils.KeyPair.fromString(privateKey);\n *\n * const keyStore = new keyStores.InMemoryKeyStore();\n * keyStore.setKey('testnet', 'example-account.testnet', keyPair);\n *\n * const config = {\n *   keyStore, // instance of InMemoryKeyStore\n *   networkId: 'testnet',\n *   nodeUrl: 'https://rpc.testnet.near.org',\n *   walletUrl: 'https://wallet.testnet.near.org',\n *   helperUrl: 'https://helper.testnet.near.org',\n *   explorerUrl: 'https://explorer.testnet.near.org'\n * };\n *\n * // inside an async function\n * const near = await connect(config)\n * ```\n */\nclass InMemoryKeyStore extends keystore_1.KeyStore {\n    constructor() {\n        super();\n        this.keys = {};\n    }\n    /**\n     * Stores a {@KeyPair} in in-memory storage item\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @param keyPair The key pair to store in local storage\n     */\n    async setKey(networkId, accountId, keyPair) {\n        this.keys[`${accountId}:${networkId}`] = keyPair.toString();\n    }\n    /**\n     * Gets a {@link KeyPair} from in-memory storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */\n    async getKey(networkId, accountId) {\n        const value = this.keys[`${accountId}:${networkId}`];\n        if (!value) {\n            return null;\n        }\n        return key_pair_1.KeyPair.fromString(value);\n    }\n    /**\n     * Removes a {@link KeyPair} from in-memory storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */\n    async removeKey(networkId, accountId) {\n        delete this.keys[`${accountId}:${networkId}`];\n    }\n    /**\n     * Removes all {@link KeyPairs} from in-memory storage\n     */\n    async clear() {\n        this.keys = {};\n    }\n    /**\n     * Get the network(s) from in-memory storage\n     * @returns {Promise<string[]>}\n     */\n    async getNetworks() {\n        const result = new Set();\n        Object.keys(this.keys).forEach((key) => {\n            const parts = key.split(':');\n            result.add(parts[1]);\n        });\n        return Array.from(result.values());\n    }\n    /**\n     * Gets the account(s) from in-memory storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns{Promise<string[]>}\n     */\n    async getAccounts(networkId) {\n        const result = new Array();\n        Object.keys(this.keys).forEach((key) => {\n            const parts = key.split(':');\n            if (parts[parts.length - 1] === networkId) {\n                result.push(parts.slice(0, parts.length - 1).join(':'));\n            }\n        });\n        return result;\n    }\n    /** @hidden */\n    toString() {\n        return 'InMemoryKeyStore';\n    }\n}\nexports.InMemoryKeyStore = InMemoryKeyStore;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gBAAR,GAA2B,KAAK,CAAhC;;AACA,MAAMC,UAAU,GAAGC,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,mBAAD,CAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,gBAAN,SAA+BC,UAAU,CAACG,QAA1C,CAAmD;EAC/CC,WAAW,GAAG;IACV;IACA,KAAKC,IAAL,GAAY,EAAZ;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACgB,MAANC,MAAM,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,OAAvB,EAAgC;IACxC,KAAKJ,IAAL,CAAW,GAAEG,SAAU,IAAGD,SAAU,EAApC,IAAyCE,OAAO,CAACC,QAAR,EAAzC;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACgB,MAANC,MAAM,CAACJ,SAAD,EAAYC,SAAZ,EAAuB;IAC/B,MAAMV,KAAK,GAAG,KAAKO,IAAL,CAAW,GAAEG,SAAU,IAAGD,SAAU,EAApC,CAAd;;IACA,IAAI,CAACT,KAAL,EAAY;MACR,OAAO,IAAP;IACH;;IACD,OAAOI,UAAU,CAACU,OAAX,CAAmBC,UAAnB,CAA8Bf,KAA9B,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACmB,MAATgB,SAAS,CAACP,SAAD,EAAYC,SAAZ,EAAuB;IAClC,OAAO,KAAKH,IAAL,CAAW,GAAEG,SAAU,IAAGD,SAAU,EAApC,CAAP;EACH;EACD;AACJ;AACA;;;EACe,MAALQ,KAAK,GAAG;IACV,KAAKV,IAAL,GAAY,EAAZ;EACH;EACD;AACJ;AACA;AACA;;;EACqB,MAAXW,WAAW,GAAG;IAChB,MAAMC,MAAM,GAAG,IAAIC,GAAJ,EAAf;IACAvB,MAAM,CAACU,IAAP,CAAY,KAAKA,IAAjB,EAAuBc,OAAvB,CAAgCC,GAAD,IAAS;MACpC,MAAMC,KAAK,GAAGD,GAAG,CAACE,KAAJ,CAAU,GAAV,CAAd;MACAL,MAAM,CAACM,GAAP,CAAWF,KAAK,CAAC,CAAD,CAAhB;IACH,CAHD;IAIA,OAAOG,KAAK,CAACC,IAAN,CAAWR,MAAM,CAACS,MAAP,EAAX,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACqB,MAAXC,WAAW,CAACpB,SAAD,EAAY;IACzB,MAAMU,MAAM,GAAG,IAAIO,KAAJ,EAAf;IACA7B,MAAM,CAACU,IAAP,CAAY,KAAKA,IAAjB,EAAuBc,OAAvB,CAAgCC,GAAD,IAAS;MACpC,MAAMC,KAAK,GAAGD,GAAG,CAACE,KAAJ,CAAU,GAAV,CAAd;;MACA,IAAID,KAAK,CAACA,KAAK,CAACO,MAAN,GAAe,CAAhB,CAAL,KAA4BrB,SAAhC,EAA2C;QACvCU,MAAM,CAACY,IAAP,CAAYR,KAAK,CAACS,KAAN,CAAY,CAAZ,EAAeT,KAAK,CAACO,MAAN,GAAe,CAA9B,EAAiCG,IAAjC,CAAsC,GAAtC,CAAZ;MACH;IACJ,CALD;IAMA,OAAOd,MAAP;EACH;EACD;;;EACAP,QAAQ,GAAG;IACP,OAAO,kBAAP;EACH;;AAvE8C;;AAyEnDb,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B"},"metadata":{},"sourceType":"script"}