{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseNearAmount = exports.formatNearAmount = exports.NEAR_NOMINATION = exports.NEAR_NOMINATION_EXP = void 0;\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n/**\n * Exponent for calculating how many indivisible units are there in one NEAR. See {@link NEAR_NOMINATION}.\n */\n\n\nexports.NEAR_NOMINATION_EXP = 24;\n/**\n * Number of indivisible units in one NEAR. Derived from {@link NEAR_NOMINATION_EXP}.\n */\n\nexports.NEAR_NOMINATION = new bn_js_1.default('10', 10).pow(new bn_js_1.default(exports.NEAR_NOMINATION_EXP, 10)); // Pre-calculate offests used for rounding to different number of digits\n\nconst ROUNDING_OFFSETS = [];\nconst BN10 = new bn_js_1.default(10);\n\nfor (let i = 0, offset = new bn_js_1.default(5); i < exports.NEAR_NOMINATION_EXP; i++, offset = offset.mul(BN10)) {\n  ROUNDING_OFFSETS[i] = offset;\n}\n/**\n * Convert account balance value from internal indivisible units to NEAR. 1 NEAR is defined by {@link NEAR_NOMINATION}.\n * Effectively this divides given amount by {@link NEAR_NOMINATION}.\n *\n * @param balance decimal string representing balance in smallest non-divisible NEAR units (as specified by {@link NEAR_NOMINATION})\n * @param fracDigits number of fractional digits to preserve in formatted string. Balance is rounded to match given number of digits.\n * @returns Value in Ⓝ\n */\n\n\nfunction formatNearAmount(balance) {\n  let fracDigits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : exports.NEAR_NOMINATION_EXP;\n  const balanceBN = new bn_js_1.default(balance, 10);\n\n  if (fracDigits !== exports.NEAR_NOMINATION_EXP) {\n    // Adjust balance for rounding at given number of digits\n    const roundingExp = exports.NEAR_NOMINATION_EXP - fracDigits - 1;\n\n    if (roundingExp > 0) {\n      balanceBN.iadd(ROUNDING_OFFSETS[roundingExp]);\n    }\n  }\n\n  balance = balanceBN.toString();\n  const wholeStr = balance.substring(0, balance.length - exports.NEAR_NOMINATION_EXP) || '0';\n  const fractionStr = balance.substring(balance.length - exports.NEAR_NOMINATION_EXP).padStart(exports.NEAR_NOMINATION_EXP, '0').substring(0, fracDigits);\n  return trimTrailingZeroes(`${formatWithCommas(wholeStr)}.${fractionStr}`);\n}\n\nexports.formatNearAmount = formatNearAmount;\n/**\n * Convert human readable NEAR amount to internal indivisible units.\n * Effectively this multiplies given amount by {@link NEAR_NOMINATION}.\n *\n * @param amt decimal string (potentially fractional) denominated in NEAR.\n * @returns The parsed yoctoⓃ amount or null if no amount was passed in\n */\n\nfunction parseNearAmount(amt) {\n  if (!amt) {\n    return null;\n  }\n\n  amt = cleanupAmount(amt);\n  const split = amt.split('.');\n  const wholePart = split[0];\n  const fracPart = split[1] || '';\n\n  if (split.length > 2 || fracPart.length > exports.NEAR_NOMINATION_EXP) {\n    throw new Error(`Cannot parse '${amt}' as NEAR amount`);\n  }\n\n  return trimLeadingZeroes(wholePart + fracPart.padEnd(exports.NEAR_NOMINATION_EXP, '0'));\n}\n\nexports.parseNearAmount = parseNearAmount;\n/**\n * Removes commas from the input\n * @param amount A value or amount that may contain commas\n * @returns string The cleaned value\n */\n\nfunction cleanupAmount(amount) {\n  return amount.replace(/,/g, '').trim();\n}\n/**\n * Removes .000… from an input\n * @param value A value that may contain trailing zeroes in the decimals place\n * @returns string The value without the trailing zeros\n */\n\n\nfunction trimTrailingZeroes(value) {\n  return value.replace(/\\.?0*$/, '');\n}\n/**\n * Removes leading zeroes from an input\n * @param value A value that may contain leading zeroes\n * @returns string The value without the leading zeroes\n */\n\n\nfunction trimLeadingZeroes(value) {\n  value = value.replace(/^0+/, '');\n\n  if (value === '') {\n    return '0';\n  }\n\n  return value;\n}\n/**\n * Returns a human-readable value with commas\n * @param value A value that may not contain commas\n * @returns string A value with commas\n */\n\n\nfunction formatWithCommas(value) {\n  const pattern = /(-?\\d+)(\\d{3})/;\n\n  while (pattern.test(value)) {\n    value = value.replace(pattern, '$1,$2');\n  }\n\n  return value;\n}","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","parseNearAmount","formatNearAmount","NEAR_NOMINATION","NEAR_NOMINATION_EXP","bn_js_1","require","default","pow","ROUNDING_OFFSETS","BN10","i","offset","mul","balance","fracDigits","balanceBN","roundingExp","iadd","toString","wholeStr","substring","length","fractionStr","padStart","trimTrailingZeroes","formatWithCommas","amt","cleanupAmount","split","wholePart","fracPart","Error","trimLeadingZeroes","padEnd","amount","replace","trim","pattern","test"],"sources":["C:/Projects/node_modules/near-api-js/lib/utils/format.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseNearAmount = exports.formatNearAmount = exports.NEAR_NOMINATION = exports.NEAR_NOMINATION_EXP = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n/**\n * Exponent for calculating how many indivisible units are there in one NEAR. See {@link NEAR_NOMINATION}.\n */\nexports.NEAR_NOMINATION_EXP = 24;\n/**\n * Number of indivisible units in one NEAR. Derived from {@link NEAR_NOMINATION_EXP}.\n */\nexports.NEAR_NOMINATION = new bn_js_1.default('10', 10).pow(new bn_js_1.default(exports.NEAR_NOMINATION_EXP, 10));\n// Pre-calculate offests used for rounding to different number of digits\nconst ROUNDING_OFFSETS = [];\nconst BN10 = new bn_js_1.default(10);\nfor (let i = 0, offset = new bn_js_1.default(5); i < exports.NEAR_NOMINATION_EXP; i++, offset = offset.mul(BN10)) {\n    ROUNDING_OFFSETS[i] = offset;\n}\n/**\n * Convert account balance value from internal indivisible units to NEAR. 1 NEAR is defined by {@link NEAR_NOMINATION}.\n * Effectively this divides given amount by {@link NEAR_NOMINATION}.\n *\n * @param balance decimal string representing balance in smallest non-divisible NEAR units (as specified by {@link NEAR_NOMINATION})\n * @param fracDigits number of fractional digits to preserve in formatted string. Balance is rounded to match given number of digits.\n * @returns Value in Ⓝ\n */\nfunction formatNearAmount(balance, fracDigits = exports.NEAR_NOMINATION_EXP) {\n    const balanceBN = new bn_js_1.default(balance, 10);\n    if (fracDigits !== exports.NEAR_NOMINATION_EXP) {\n        // Adjust balance for rounding at given number of digits\n        const roundingExp = exports.NEAR_NOMINATION_EXP - fracDigits - 1;\n        if (roundingExp > 0) {\n            balanceBN.iadd(ROUNDING_OFFSETS[roundingExp]);\n        }\n    }\n    balance = balanceBN.toString();\n    const wholeStr = balance.substring(0, balance.length - exports.NEAR_NOMINATION_EXP) || '0';\n    const fractionStr = balance.substring(balance.length - exports.NEAR_NOMINATION_EXP)\n        .padStart(exports.NEAR_NOMINATION_EXP, '0').substring(0, fracDigits);\n    return trimTrailingZeroes(`${formatWithCommas(wholeStr)}.${fractionStr}`);\n}\nexports.formatNearAmount = formatNearAmount;\n/**\n * Convert human readable NEAR amount to internal indivisible units.\n * Effectively this multiplies given amount by {@link NEAR_NOMINATION}.\n *\n * @param amt decimal string (potentially fractional) denominated in NEAR.\n * @returns The parsed yoctoⓃ amount or null if no amount was passed in\n */\nfunction parseNearAmount(amt) {\n    if (!amt) {\n        return null;\n    }\n    amt = cleanupAmount(amt);\n    const split = amt.split('.');\n    const wholePart = split[0];\n    const fracPart = split[1] || '';\n    if (split.length > 2 || fracPart.length > exports.NEAR_NOMINATION_EXP) {\n        throw new Error(`Cannot parse '${amt}' as NEAR amount`);\n    }\n    return trimLeadingZeroes(wholePart + fracPart.padEnd(exports.NEAR_NOMINATION_EXP, '0'));\n}\nexports.parseNearAmount = parseNearAmount;\n/**\n * Removes commas from the input\n * @param amount A value or amount that may contain commas\n * @returns string The cleaned value\n */\nfunction cleanupAmount(amount) {\n    return amount.replace(/,/g, '').trim();\n}\n/**\n * Removes .000… from an input\n * @param value A value that may contain trailing zeroes in the decimals place\n * @returns string The value without the trailing zeros\n */\nfunction trimTrailingZeroes(value) {\n    return value.replace(/\\.?0*$/, '');\n}\n/**\n * Removes leading zeroes from an input\n * @param value A value that may contain leading zeroes\n * @returns string The value without the leading zeroes\n */\nfunction trimLeadingZeroes(value) {\n    value = value.replace(/^0+/, '');\n    if (value === '') {\n        return '0';\n    }\n    return value;\n}\n/**\n * Returns a human-readable value with commas\n * @param value A value that may not contain commas\n * @returns string A value with commas\n */\nfunction formatWithCommas(value) {\n    const pattern = /(-?\\d+)(\\d{3})/;\n    while (pattern.test(value)) {\n        value = value.replace(pattern, '$1,$2');\n    }\n    return value;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}