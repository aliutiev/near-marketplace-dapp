{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.Mustache = factory());\n})(this, function () {\n  'use strict';\n  /*!\n   * mustache.js - Logic-less {{mustache}} templates with JavaScript\n   * http://github.com/janl/mustache.js\n   */\n\n  var objectToString = Object.prototype.toString;\n\n  var isArray = Array.isArray || function isArrayPolyfill(object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction(object) {\n    return typeof object === 'function';\n  }\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n\n\n  function typeStr(obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp(string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n\n\n  function hasProperty(obj, propName) {\n    return obj != null && typeof obj === 'object' && propName in obj;\n  }\n  /**\n   * Safe way of detecting whether or not the given thing is a primitive and\n   * whether it has the given property\n   */\n\n\n  function primitiveHasOwnProperty(primitive, propName) {\n    return primitive != null && typeof primitive !== 'object' && primitive.hasOwnProperty && primitive.hasOwnProperty(propName);\n  } // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n\n\n  var regExpTest = RegExp.prototype.test;\n\n  function testRegExp(re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n\n  function isWhitespace(string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml(string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap(s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   *\n   * Tokens for partials also contain two more elements: 1) a string value of\n   * indendation prior to that tag and 2) the index of that tag on that line -\n   * eg a value of 2 indicates the partial is the third tag on this line.\n   */\n\n  function parseTemplate(template, tags) {\n    if (!template) return [];\n    var lineHasNonSpace = false;\n    var sections = []; // Stack to hold section tokens\n\n    var tokens = []; // Buffer to hold the tokens\n\n    var spaces = []; // Indices of whitespace tokens on the current line\n\n    var hasTag = false; // Is there a {{tag}} on the current line?\n\n    var nonSpace = false; // Is there a non-space char on the current line?\n\n    var indentation = ''; // Tracks indentation for tags that use it\n\n    var tagIndex = 0; // Stores a count of number of tags encountered on a line\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n\n    function stripSpace() {\n      if (hasTag && !nonSpace) {\n        while (spaces.length) delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n\n    function compileTags(tagsToCompile) {\n      if (typeof tagsToCompile === 'string') tagsToCompile = tagsToCompile.split(spaceRe, 2);\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2) throw new Error('Invalid tags: ' + tagsToCompile);\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n    var scanner = new Scanner(template);\n    var start, type, value, chr, token, openSection;\n\n    while (!scanner.eos()) {\n      start = scanner.pos; // Match any text between tags.\n\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n            indentation += chr;\n          } else {\n            nonSpace = true;\n            lineHasNonSpace = true;\n            indentation += ' ';\n          }\n\n          tokens.push(['text', chr, start, start + 1]);\n          start += 1; // Check for whitespace on the current line.\n\n          if (chr === '\\n') {\n            stripSpace();\n            indentation = '';\n            tagIndex = 0;\n            lineHasNonSpace = false;\n          }\n        }\n      } // Match the opening tag.\n\n\n      if (!scanner.scan(openingTagRe)) break;\n      hasTag = true; // Get the tag type.\n\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe); // Get the tag value.\n\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      } // Match the closing tag.\n\n\n      if (!scanner.scan(closingTagRe)) throw new Error('Unclosed tag at ' + scanner.pos);\n\n      if (type == '>') {\n        token = [type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace];\n      } else {\n        token = [type, value, start, scanner.pos];\n      }\n\n      tagIndex++;\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n        if (!openSection) throw new Error('Unopened section \"' + value + '\" at ' + start);\n        if (openSection[1] !== value) throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    stripSpace(); // Make sure there are no open sections when we're done.\n\n    openSection = sections.pop();\n    if (openSection) throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n    return nestTokens(squashTokens(tokens));\n  }\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n\n\n  function squashTokens(tokens) {\n    var squashedTokens = [];\n    var token, lastToken;\n\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n\n\n  function nestTokens(tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n    var token, section;\n\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n\n\n  function Scanner(string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n\n\n  Scanner.prototype.eos = function eos() {\n    return this.tail === '';\n  };\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n\n\n  Scanner.prototype.scan = function scan(re) {\n    var match = this.tail.match(re);\n    if (!match || match.index !== 0) return '';\n    var string = match[0];\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n    return string;\n  };\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n\n\n  Scanner.prototype.scanUntil = function scanUntil(re) {\n    var index = this.tail.search(re),\n        match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n\n      case 0:\n        match = '';\n        break;\n\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n    return match;\n  };\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n\n\n  function Context(view, parentContext) {\n    this.view = view;\n    this.cache = {\n      '.': this.view\n    };\n    this.parent = parentContext;\n  }\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n\n\n  Context.prototype.push = function push(view) {\n    return new Context(view, this);\n  };\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n\n\n  Context.prototype.lookup = function lookup(name) {\n    var cache = this.cache;\n    var value;\n\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this,\n          intermediateValue,\n          names,\n          index,\n          lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          intermediateValue = context.view;\n          names = name.split('.');\n          index = 0;\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           *\n           * In the case where dot notation is used, we consider the lookup\n           * to be successful even if the last \"object\" in the path is\n           * not actually an object but a primitive (e.g., a string, or an\n           * integer), because it is sometimes useful to access a property\n           * of an autoboxed primitive, such as the length of a string.\n           **/\n\n          while (intermediateValue != null && index < names.length) {\n            if (index === names.length - 1) lookupHit = hasProperty(intermediateValue, names[index]) || primitiveHasOwnProperty(intermediateValue, names[index]);\n            intermediateValue = intermediateValue[names[index++]];\n          }\n        } else {\n          intermediateValue = context.view[name];\n          /**\n           * Only checking against `hasProperty`, which always returns `false` if\n           * `context.view` is not an object. Deliberately omitting the check\n           * against `primitiveHasOwnProperty` if dot notation is not used.\n           *\n           * Consider this example:\n           * ```\n           * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n           * ```\n           *\n           * If we were to check also against `primitiveHasOwnProperty`, as we do\n           * in the dot notation case, then render call would return:\n           *\n           * \"The length of a football field is 9.\"\n           *\n           * rather than the expected:\n           *\n           * \"The length of a football field is 100 yards.\"\n           **/\n\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit) {\n          value = intermediateValue;\n          break;\n        }\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value)) value = value.call(this.view);\n    return value;\n  };\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n\n\n  function Writer() {\n    this.templateCache = {\n      _cache: {},\n      set: function set(key, value) {\n        this._cache[key] = value;\n      },\n      get: function get(key) {\n        return this._cache[key];\n      },\n      clear: function clear() {\n        this._cache = {};\n      }\n    };\n  }\n  /**\n   * Clears all cached templates in this writer.\n   */\n\n\n  Writer.prototype.clearCache = function clearCache() {\n    if (typeof this.templateCache !== 'undefined') {\n      this.templateCache.clear();\n    }\n  };\n  /**\n   * Parses and caches the given `template` according to the given `tags` or\n   * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n   * that is generated from the parse.\n   */\n\n\n  Writer.prototype.parse = function parse(template, tags) {\n    var cache = this.templateCache;\n    var cacheKey = template + ':' + (tags || mustache.tags).join(':');\n    var isCacheEnabled = typeof cache !== 'undefined';\n    var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;\n\n    if (tokens == undefined) {\n      tokens = parseTemplate(template, tags);\n      isCacheEnabled && cache.set(cacheKey, tokens);\n    }\n\n    return tokens;\n  };\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   *\n   * If the optional `config` argument is given here, then it should be an\n   * object with a `tags` attribute or an `escape` attribute or both.\n   * If an array is passed, then it will be interpreted the same way as\n   * a `tags` attribute on a `config` object.\n   *\n   * The `tags` attribute of a `config` object must be an array with two\n   * string values: the opening and closing tags used in the template (e.g.\n   * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   *\n   * The `escape` attribute of a `config` object must be a function which\n   * accepts a string as input and outputs a safely escaped string.\n   * If an `escape` function is not provided, then an HTML-safe string\n   * escaping function is used as the default.\n   */\n\n\n  Writer.prototype.render = function render(template, view, partials, config) {\n    var tags = this.getConfigTags(config);\n    var tokens = this.parse(template, tags);\n    var context = view instanceof Context ? view : new Context(view, undefined);\n    return this.renderTokens(tokens, context, partials, template, config);\n  };\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n\n\n  Writer.prototype.renderTokens = function renderTokens(tokens, context, partials, originalTemplate, config) {\n    var buffer = '';\n    var token, symbol, value;\n\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate, config);else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate, config);else if (symbol === '>') value = this.renderPartial(token, context, partials, config);else if (symbol === '&') value = this.unescapedValue(token, context);else if (symbol === 'name') value = this.escapedValue(token, context, config);else if (symbol === 'text') value = this.rawValue(token);\n      if (value !== undefined) buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection(token, context, partials, originalTemplate, config) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]); // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n\n    function subRender(template) {\n      return self.render(template, context, partials, config);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string') throw new Error('Cannot use higher-order sections without the original template'); // Extract the portion of the original template that the section contains.\n\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n      if (value != null) buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted(token, context, partials, originalTemplate, config) {\n    var value = context.lookup(token[1]); // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n\n    if (!value || isArray(value) && value.length === 0) return this.renderTokens(token[4], context, partials, originalTemplate, config);\n  };\n\n  Writer.prototype.indentPartial = function indentPartial(partial, indentation, lineHasNonSpace) {\n    var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\n    var partialByNl = partial.split('\\n');\n\n    for (var i = 0; i < partialByNl.length; i++) {\n      if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\n        partialByNl[i] = filteredIndentation + partialByNl[i];\n      }\n    }\n\n    return partialByNl.join('\\n');\n  };\n\n  Writer.prototype.renderPartial = function renderPartial(token, context, partials, config) {\n    if (!partials) return;\n    var tags = this.getConfigTags(config);\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n\n    if (value != null) {\n      var lineHasNonSpace = token[6];\n      var tagIndex = token[5];\n      var indentation = token[4];\n      var indentedValue = value;\n\n      if (tagIndex == 0 && indentation) {\n        indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\n      }\n\n      var tokens = this.parse(indentedValue, tags);\n      return this.renderTokens(tokens, context, partials, indentedValue, config);\n    }\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue(token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null) return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue(token, context, config) {\n    var escape = this.getConfigEscape(config) || mustache.escape;\n    var value = context.lookup(token[1]);\n    if (value != null) return typeof value === 'number' && escape === mustache.escape ? String(value) : escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue(token) {\n    return token[1];\n  };\n\n  Writer.prototype.getConfigTags = function getConfigTags(config) {\n    if (isArray(config)) {\n      return config;\n    } else if (config && typeof config === 'object') {\n      return config.tags;\n    } else {\n      return undefined;\n    }\n  };\n\n  Writer.prototype.getConfigEscape = function getConfigEscape(config) {\n    if (config && typeof config === 'object' && !isArray(config)) {\n      return config.escape;\n    } else {\n      return undefined;\n    }\n  };\n\n  var mustache = {\n    name: 'mustache.js',\n    version: '4.2.0',\n    tags: ['{{', '}}'],\n    clearCache: undefined,\n    escape: undefined,\n    parse: undefined,\n    render: undefined,\n    Scanner: undefined,\n    Context: undefined,\n    Writer: undefined,\n\n    /**\n     * Allows a user to override the default caching strategy, by providing an\n     * object with set, get and clear methods. This can also be used to disable\n     * the cache by setting it to the literal `undefined`.\n     */\n    set templateCache(cache) {\n      defaultWriter.templateCache = cache;\n    },\n\n    /**\n     * Gets the default or overridden caching object from the default writer.\n     */\n    get templateCache() {\n      return defaultWriter.templateCache;\n    }\n\n  }; // All high-level mustache.* functions use this writer.\n\n  var defaultWriter = new Writer();\n  /**\n   * Clears all cached templates in the default writer.\n   */\n\n  mustache.clearCache = function clearCache() {\n    return defaultWriter.clearCache();\n  };\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n\n\n  mustache.parse = function parse(template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n  /**\n   * Renders the `template` with the given `view`, `partials`, and `config`\n   * using the default writer.\n   */\n\n\n  mustache.render = function render(template, view, partials, config) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' + 'but \"' + typeStr(template) + '\" was given as the first ' + 'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials, config);\n  }; // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n\n\n  mustache.escape = escapeHtml; // Export these mainly for testing, but also for advanced usage.\n\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n  return mustache;\n});","map":{"version":3,"names":["global","factory","exports","module","define","amd","self","Mustache","objectToString","Object","prototype","toString","isArray","Array","isArrayPolyfill","object","call","isFunction","typeStr","obj","escapeRegExp","string","replace","hasProperty","propName","primitiveHasOwnProperty","primitive","hasOwnProperty","regExpTest","RegExp","test","testRegExp","re","nonSpaceRe","isWhitespace","entityMap","escapeHtml","String","fromEntityMap","s","whiteRe","spaceRe","equalsRe","curlyRe","tagRe","parseTemplate","template","tags","lineHasNonSpace","sections","tokens","spaces","hasTag","nonSpace","indentation","tagIndex","stripSpace","length","pop","openingTagRe","closingTagRe","closingCurlyRe","compileTags","tagsToCompile","split","Error","mustache","scanner","Scanner","start","type","value","chr","token","openSection","eos","pos","scanUntil","i","valueLength","charAt","push","scan","nestTokens","squashTokens","squashedTokens","lastToken","numTokens","nestedTokens","collector","section","tail","match","index","substring","search","Context","view","parentContext","cache","parent","lookup","name","context","intermediateValue","names","lookupHit","indexOf","Writer","templateCache","_cache","set","key","get","clear","clearCache","parse","cacheKey","join","isCacheEnabled","undefined","render","partials","config","getConfigTags","renderTokens","originalTemplate","buffer","symbol","renderSection","renderInverted","renderPartial","unescapedValue","escapedValue","rawValue","subRender","j","slice","indentPartial","partial","filteredIndentation","partialByNl","indentedValue","escape","getConfigEscape","version","defaultWriter","TypeError"],"sources":["C:/Projects/node_modules/mustache/mustache.js"],"sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = global || self, global.Mustache = factory());\n}(this, (function () { 'use strict';\n\n  /*!\n   * mustache.js - Logic-less {{mustache}} templates with JavaScript\n   * http://github.com/janl/mustache.js\n   */\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  /**\n   * Safe way of detecting whether or not the given thing is a primitive and\n   * whether it has the given property\n   */\n  function primitiveHasOwnProperty (primitive, propName) {\n    return (\n      primitive != null\n      && typeof primitive !== 'object'\n      && primitive.hasOwnProperty\n      && primitive.hasOwnProperty(propName)\n    );\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   *\n   * Tokens for partials also contain two more elements: 1) a string value of\n   * indendation prior to that tag and 2) the index of that tag on that line -\n   * eg a value of 2 indicates the partial is the third tag on this line.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n    var lineHasNonSpace = false;\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n    var indentation = '';  // Tracks indentation for tags that use it\n    var tagIndex = 0;      // Stores a count of number of tags encountered on a line\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n            indentation += chr;\n          } else {\n            nonSpace = true;\n            lineHasNonSpace = true;\n            indentation += ' ';\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n') {\n            stripSpace();\n            indentation = '';\n            tagIndex = 0;\n            lineHasNonSpace = false;\n          }\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      if (type == '>') {\n        token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];\n      } else {\n        token = [ type, value, start, scanner.pos ];\n      }\n      tagIndex++;\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    stripSpace();\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, intermediateValue, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          intermediateValue = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           *\n           * In the case where dot notation is used, we consider the lookup\n           * to be successful even if the last \"object\" in the path is\n           * not actually an object but a primitive (e.g., a string, or an\n           * integer), because it is sometimes useful to access a property\n           * of an autoboxed primitive, such as the length of a string.\n           **/\n          while (intermediateValue != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = (\n                hasProperty(intermediateValue, names[index])\n                || primitiveHasOwnProperty(intermediateValue, names[index])\n              );\n\n            intermediateValue = intermediateValue[names[index++]];\n          }\n        } else {\n          intermediateValue = context.view[name];\n\n          /**\n           * Only checking against `hasProperty`, which always returns `false` if\n           * `context.view` is not an object. Deliberately omitting the check\n           * against `primitiveHasOwnProperty` if dot notation is not used.\n           *\n           * Consider this example:\n           * ```\n           * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n           * ```\n           *\n           * If we were to check also against `primitiveHasOwnProperty`, as we do\n           * in the dot notation case, then render call would return:\n           *\n           * \"The length of a football field is 9.\"\n           *\n           * rather than the expected:\n           *\n           * \"The length of a football field is 100 yards.\"\n           **/\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit) {\n          value = intermediateValue;\n          break;\n        }\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.templateCache = {\n      _cache: {},\n      set: function set (key, value) {\n        this._cache[key] = value;\n      },\n      get: function get (key) {\n        return this._cache[key];\n      },\n      clear: function clear () {\n        this._cache = {};\n      }\n    };\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    if (typeof this.templateCache !== 'undefined') {\n      this.templateCache.clear();\n    }\n  };\n\n  /**\n   * Parses and caches the given `template` according to the given `tags` or\n   * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.templateCache;\n    var cacheKey = template + ':' + (tags || mustache.tags).join(':');\n    var isCacheEnabled = typeof cache !== 'undefined';\n    var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;\n\n    if (tokens == undefined) {\n      tokens = parseTemplate(template, tags);\n      isCacheEnabled && cache.set(cacheKey, tokens);\n    }\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   *\n   * If the optional `config` argument is given here, then it should be an\n   * object with a `tags` attribute or an `escape` attribute or both.\n   * If an array is passed, then it will be interpreted the same way as\n   * a `tags` attribute on a `config` object.\n   *\n   * The `tags` attribute of a `config` object must be an array with two\n   * string values: the opening and closing tags used in the template (e.g.\n   * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   *\n   * The `escape` attribute of a `config` object must be a function which\n   * accepts a string as input and outputs a safely escaped string.\n   * If an `escape` function is not provided, then an HTML-safe string\n   * escaping function is used as the default.\n   */\n  Writer.prototype.render = function render (template, view, partials, config) {\n    var tags = this.getConfigTags(config);\n    var tokens = this.parse(template, tags);\n    var context = (view instanceof Context) ? view : new Context(view, undefined);\n    return this.renderTokens(tokens, context, partials, template, config);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, config) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate, config);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate, config);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, config);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context, config);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate, config) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials, config);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate, config) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate, config);\n  };\n\n  Writer.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {\n    var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\n    var partialByNl = partial.split('\\n');\n    for (var i = 0; i < partialByNl.length; i++) {\n      if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\n        partialByNl[i] = filteredIndentation + partialByNl[i];\n      }\n    }\n    return partialByNl.join('\\n');\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials, config) {\n    if (!partials) return;\n    var tags = this.getConfigTags(config);\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null) {\n      var lineHasNonSpace = token[6];\n      var tagIndex = token[5];\n      var indentation = token[4];\n      var indentedValue = value;\n      if (tagIndex == 0 && indentation) {\n        indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\n      }\n      var tokens = this.parse(indentedValue, tags);\n      return this.renderTokens(tokens, context, partials, indentedValue, config);\n    }\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context, config) {\n    var escape = this.getConfigEscape(config) || mustache.escape;\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return (typeof value === 'number' && escape === mustache.escape) ? String(value) : escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  Writer.prototype.getConfigTags = function getConfigTags (config) {\n    if (isArray(config)) {\n      return config;\n    }\n    else if (config && typeof config === 'object') {\n      return config.tags;\n    }\n    else {\n      return undefined;\n    }\n  };\n\n  Writer.prototype.getConfigEscape = function getConfigEscape (config) {\n    if (config && typeof config === 'object' && !isArray(config)) {\n      return config.escape;\n    }\n    else {\n      return undefined;\n    }\n  };\n\n  var mustache = {\n    name: 'mustache.js',\n    version: '4.2.0',\n    tags: [ '{{', '}}' ],\n    clearCache: undefined,\n    escape: undefined,\n    parse: undefined,\n    render: undefined,\n    Scanner: undefined,\n    Context: undefined,\n    Writer: undefined,\n    /**\n     * Allows a user to override the default caching strategy, by providing an\n     * object with set, get and clear methods. This can also be used to disable\n     * the cache by setting it to the literal `undefined`.\n     */\n    set templateCache (cache) {\n      defaultWriter.templateCache = cache;\n    },\n    /**\n     * Gets the default or overridden caching object from the default writer.\n     */\n    get templateCache () {\n      return defaultWriter.templateCache;\n    }\n  };\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view`, `partials`, and `config`\n   * using the default writer.\n   */\n  mustache.render = function render (template, view, partials, config) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials, config);\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n\n})));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}