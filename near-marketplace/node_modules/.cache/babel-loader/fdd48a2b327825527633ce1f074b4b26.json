{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectedWalletAccount = exports.WalletAccount = exports.WalletConnection = void 0;\n/**\n * The classes in this module are used in conjunction with the {@link BrowserLocalStorageKeyStore}. This module exposes two classes:\n * * {@link WalletConnection} which redirects users to {@link https://docs.near.org/docs/tools/near-wallet | NEAR Wallet} for key management.\n * * {@link ConnectedWalletAccount} is an {@link Account} implementation that uses {@link WalletConnection} to get keys\n *\n * @module walletAccount\n */\n\nconst depd_1 = __importDefault(require(\"depd\"));\n\nconst account_1 = require(\"./account\");\n\nconst transaction_1 = require(\"./transaction\");\n\nconst utils_1 = require(\"./utils\");\n\nconst borsh_1 = require(\"borsh\");\n\nconst borsh_2 = require(\"borsh\");\n\nconst LOGIN_WALLET_URL_SUFFIX = '/login/';\nconst MULTISIG_HAS_METHOD = 'add_request_and_confirm';\nconst LOCAL_STORAGE_KEY_SUFFIX = '_wallet_auth_key';\nconst PENDING_ACCESS_KEY_PREFIX = 'pending_key'; // browser storage key for a pending access key (i.e. key has been generated but we are not sure it was added yet)\n\n/**\n * This class is used in conjunction with the {@link BrowserLocalStorageKeyStore}.\n * It redirects users to {@link https://docs.near.org/docs/tools/near-wallet | NEAR Wallet} for key management.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#wallet}\n * @example\n * ```js\n * // create new WalletConnection instance\n * const wallet = new WalletConnection(near, 'my-app');\n *\n * // If not signed in redirect to the NEAR wallet to sign in\n * // keys will be stored in the BrowserLocalStorageKeyStore\n * if(!wallet.isSingnedIn()) return wallet.requestSignIn()\n * ```\n */\n\nclass WalletConnection {\n  constructor(near, appKeyPrefix) {\n    this._near = near;\n    const authDataKey = appKeyPrefix + LOCAL_STORAGE_KEY_SUFFIX;\n    const authData = JSON.parse(window.localStorage.getItem(authDataKey));\n    this._networkId = near.config.networkId;\n    this._walletBaseUrl = near.config.walletUrl;\n    appKeyPrefix = appKeyPrefix || near.config.contractName || 'default';\n    this._keyStore = near.connection.signer.keyStore;\n    this._authData = authData || {\n      allKeys: []\n    };\n    this._authDataKey = authDataKey;\n\n    if (!this.isSignedIn()) {\n      this._completeSignInWithAccessKey();\n    }\n  }\n  /**\n   * Returns true, if this WalletAccount is authorized with the wallet.\n   * @example\n   * ```js\n   * const wallet = new WalletConnection(near, 'my-app');\n   * wallet.isSignedIn();\n   * ```\n   */\n\n\n  isSignedIn() {\n    return !!this._authData.accountId;\n  }\n  /**\n   * Returns authorized Account ID.\n   * @example\n   * ```js\n   * const wallet = new WalletConnection(near, 'my-app');\n   * wallet.getAccountId();\n   * ```\n   */\n\n\n  getAccountId() {\n    return this._authData.accountId || '';\n  }\n  /**\n   * Redirects current page to the wallet authentication page.\n   * @param options An optional options object\n   * @param options.contractId The NEAR account where the contract is deployed\n   * @param options.successUrl URL to redirect upon success. Default: current url\n   * @param options.failureUrl URL to redirect upon failure. Default: current url\n   *\n   * @example\n   * ```js\n   * const wallet = new WalletConnection(near, 'my-app');\n   * // redirects to the NEAR Wallet\n   * wallet.requestSignIn({ contractId: 'account-with-deploy-contract.near' });\n   * ```\n   */\n\n\n  async requestSignIn() {\n    let contractIdOrOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let title = arguments.length > 1 ? arguments[1] : undefined;\n    let successUrl = arguments.length > 2 ? arguments[2] : undefined;\n    let failureUrl = arguments.length > 3 ? arguments[3] : undefined;\n    let options;\n\n    if (typeof contractIdOrOptions === 'string') {\n      const deprecate = depd_1.default('requestSignIn(contractId, title)');\n      deprecate('`title` ignored; use `requestSignIn({ contractId, methodNames, successUrl, failureUrl })` instead');\n      options = {\n        contractId: contractIdOrOptions,\n        successUrl,\n        failureUrl\n      };\n    } else {\n      options = contractIdOrOptions;\n    }\n\n    const currentUrl = new URL(window.location.href);\n    const newUrl = new URL(this._walletBaseUrl + LOGIN_WALLET_URL_SUFFIX);\n    newUrl.searchParams.set('success_url', options.successUrl || currentUrl.href);\n    newUrl.searchParams.set('failure_url', options.failureUrl || currentUrl.href);\n\n    if (options.contractId) {\n      /* Throws exception if contract account does not exist */\n      const contractAccount = await this._near.account(options.contractId);\n      await contractAccount.state();\n      newUrl.searchParams.set('contract_id', options.contractId);\n      const accessKey = utils_1.KeyPair.fromRandom('ed25519');\n      newUrl.searchParams.set('public_key', accessKey.getPublicKey().toString());\n      await this._keyStore.setKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + accessKey.getPublicKey(), accessKey);\n    }\n\n    if (options.methodNames) {\n      options.methodNames.forEach(methodName => {\n        newUrl.searchParams.append('methodNames', methodName);\n      });\n    }\n\n    window.location.assign(newUrl.toString());\n  }\n\n  async requestSignTransactions() {\n    if (Array.isArray(arguments.length <= 0 ? undefined : arguments[0])) {\n      const deprecate = depd_1.default('WalletConnection.requestSignTransactions(transactions, callbackUrl, meta)');\n      deprecate('use `WalletConnection.requestSignTransactions(RequestSignTransactionsOptions)` instead');\n      return this._requestSignTransactions({\n        transactions: arguments.length <= 0 ? undefined : arguments[0],\n        callbackUrl: arguments.length <= 1 ? undefined : arguments[1],\n        meta: arguments.length <= 2 ? undefined : arguments[2]\n      });\n    }\n\n    return this._requestSignTransactions(arguments.length <= 0 ? undefined : arguments[0]);\n  }\n\n  async _requestSignTransactions(_ref) {\n    let {\n      transactions,\n      meta,\n      callbackUrl\n    } = _ref;\n    const currentUrl = new URL(window.location.href);\n    const newUrl = new URL('sign', this._walletBaseUrl);\n    newUrl.searchParams.set('transactions', transactions.map(transaction => borsh_2.serialize(transaction_1.SCHEMA, transaction)).map(serialized => Buffer.from(serialized).toString('base64')).join(','));\n    newUrl.searchParams.set('callbackUrl', callbackUrl || currentUrl.href);\n    if (meta) newUrl.searchParams.set('meta', meta);\n    window.location.assign(newUrl.toString());\n  }\n  /**\n   * @hidden\n   * Complete sign in for a given account id and public key. To be invoked by the app when getting a callback from the wallet.\n   */\n\n\n  async _completeSignInWithAccessKey() {\n    const currentUrl = new URL(window.location.href);\n    const publicKey = currentUrl.searchParams.get('public_key') || '';\n    const allKeys = (currentUrl.searchParams.get('all_keys') || '').split(',');\n    const accountId = currentUrl.searchParams.get('account_id') || ''; // TODO: Handle errors during login\n\n    if (accountId) {\n      this._authData = {\n        accountId,\n        allKeys\n      };\n      window.localStorage.setItem(this._authDataKey, JSON.stringify(this._authData));\n\n      if (publicKey) {\n        await this._moveKeyFromTempToPermanent(accountId, publicKey);\n      }\n    }\n\n    currentUrl.searchParams.delete('public_key');\n    currentUrl.searchParams.delete('all_keys');\n    currentUrl.searchParams.delete('account_id');\n    currentUrl.searchParams.delete('meta');\n    currentUrl.searchParams.delete('transactionHashes');\n    window.history.replaceState({}, document.title, currentUrl.toString());\n  }\n  /**\n   * @hidden\n   * @param accountId The NEAR account owning the given public key\n   * @param publicKey The public key being set to the key store\n   */\n\n\n  async _moveKeyFromTempToPermanent(accountId, publicKey) {\n    const keyPair = await this._keyStore.getKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + publicKey);\n    await this._keyStore.setKey(this._networkId, accountId, keyPair);\n    await this._keyStore.removeKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + publicKey);\n  }\n  /**\n   * Sign out from the current account\n   * @example\n   * walletAccount.signOut();\n   */\n\n\n  signOut() {\n    this._authData = {};\n    window.localStorage.removeItem(this._authDataKey);\n  }\n  /**\n   * Returns the current connected wallet account\n   */\n\n\n  account() {\n    if (!this._connectedAccount) {\n      this._connectedAccount = new ConnectedWalletAccount(this, this._near.connection, this._authData.accountId);\n    }\n\n    return this._connectedAccount;\n  }\n\n}\n\nexports.WalletConnection = WalletConnection;\nexports.WalletAccount = WalletConnection;\n/**\n * {@link Account} implementation which redirects to wallet using {@link WalletConnection} when no local key is available.\n */\n\nclass ConnectedWalletAccount extends account_1.Account {\n  constructor(walletConnection, connection, accountId) {\n    super(connection, accountId);\n    this.walletConnection = walletConnection;\n  } // Overriding Account methods\n\n  /**\n   * Sign a transaction by redirecting to the NEAR Wallet\n   * @see {@link WalletConnection.requestSignTransactions}\n   */\n\n\n  signAndSendTransaction() {\n    if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'string') {\n      return this._signAndSendTransaction({\n        receiverId: arguments.length <= 0 ? undefined : arguments[0],\n        actions: arguments.length <= 1 ? undefined : arguments[1]\n      });\n    }\n\n    return this._signAndSendTransaction(arguments.length <= 0 ? undefined : arguments[0]);\n  }\n\n  async _signAndSendTransaction(_ref2) {\n    let {\n      receiverId,\n      actions,\n      walletMeta,\n      walletCallbackUrl = window.location.href\n    } = _ref2;\n    const localKey = await this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);\n    let accessKey = await this.accessKeyForTransaction(receiverId, actions, localKey);\n\n    if (!accessKey) {\n      throw new Error(`Cannot find matching key for transaction sent to ${receiverId}`);\n    }\n\n    if (localKey && localKey.toString() === accessKey.public_key) {\n      try {\n        return await super.signAndSendTransaction({\n          receiverId,\n          actions\n        });\n      } catch (e) {\n        if (e.type === 'NotEnoughAllowance') {\n          accessKey = await this.accessKeyForTransaction(receiverId, actions);\n        } else {\n          throw e;\n        }\n      }\n    }\n\n    const block = await this.connection.provider.block({\n      finality: 'final'\n    });\n    const blockHash = borsh_1.baseDecode(block.header.hash);\n    const publicKey = utils_1.PublicKey.from(accessKey.public_key); // TODO: Cache & listen for nonce updates for given access key\n\n    const nonce = accessKey.access_key.nonce + 1;\n    const transaction = transaction_1.createTransaction(this.accountId, publicKey, receiverId, nonce, actions, blockHash);\n    await this.walletConnection.requestSignTransactions({\n      transactions: [transaction],\n      meta: walletMeta,\n      callbackUrl: walletCallbackUrl\n    });\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        reject(new Error('Failed to redirect to sign transaction'));\n      }, 1000);\n    }); // TODO: Aggregate multiple transaction request with \"debounce\".\n    // TODO: Introduce TrasactionQueue which also can be used to watch for status?\n  }\n  /**\n   * Check if given access key allows the function call or method attempted in transaction\n   * @param accessKey Array of {access_key: AccessKey, public_key: PublicKey} items\n   * @param receiverId The NEAR account attempting to have access\n   * @param actions The action(s) needed to be checked for access\n   */\n\n\n  async accessKeyMatchesTransaction(accessKey, receiverId, actions) {\n    const {\n      access_key: {\n        permission\n      }\n    } = accessKey;\n\n    if (permission === 'FullAccess') {\n      return true;\n    }\n\n    if (permission.FunctionCall) {\n      const {\n        receiver_id: allowedReceiverId,\n        method_names: allowedMethods\n      } = permission.FunctionCall;\n      /********************************\n      Accept multisig access keys and let wallets attempt to signAndSendTransaction\n      If an access key has itself as receiverId and method permission add_request_and_confirm, then it is being used in a wallet with multisig contract: https://github.com/near/core-contracts/blob/671c05f09abecabe7a7e58efe942550a35fc3292/multisig/src/lib.rs#L149-L153\n      ********************************/\n\n      if (allowedReceiverId === this.accountId && allowedMethods.includes(MULTISIG_HAS_METHOD)) {\n        return true;\n      }\n\n      if (allowedReceiverId === receiverId) {\n        if (actions.length !== 1) {\n          return false;\n        }\n\n        const [{\n          functionCall\n        }] = actions;\n        return functionCall && (!functionCall.deposit || functionCall.deposit.toString() === '0') && ( // TODO: Should support charging amount smaller than allowance?\n        allowedMethods.length === 0 || allowedMethods.includes(functionCall.methodName)); // TODO: Handle cases when allowance doesn't have enough to pay for gas\n      }\n    } // TODO: Support other permissions than FunctionCall\n\n\n    return false;\n  }\n  /**\n   * Helper function returning the access key (if it exists) to the receiver that grants the designated permission\n   * @param receiverId The NEAR account seeking the access key for a transaction\n   * @param actions The action(s) sought to gain access to\n   * @param localKey A local public key provided to check for access\n   * @returns Promise<any>\n   */\n\n\n  async accessKeyForTransaction(receiverId, actions, localKey) {\n    const accessKeys = await this.getAccessKeys();\n\n    if (localKey) {\n      const accessKey = accessKeys.find(key => key.public_key.toString() === localKey.toString());\n\n      if (accessKey && (await this.accessKeyMatchesTransaction(accessKey, receiverId, actions))) {\n        return accessKey;\n      }\n    }\n\n    const walletKeys = this.walletConnection._authData.allKeys;\n\n    for (const accessKey of accessKeys) {\n      if (walletKeys.indexOf(accessKey.public_key) !== -1 && (await this.accessKeyMatchesTransaction(accessKey, receiverId, actions))) {\n        return accessKey;\n      }\n    }\n\n    return null;\n  }\n\n}\n\nexports.ConnectedWalletAccount = ConnectedWalletAccount;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","ConnectedWalletAccount","WalletAccount","WalletConnection","depd_1","require","account_1","transaction_1","utils_1","borsh_1","borsh_2","LOGIN_WALLET_URL_SUFFIX","MULTISIG_HAS_METHOD","LOCAL_STORAGE_KEY_SUFFIX","PENDING_ACCESS_KEY_PREFIX","constructor","near","appKeyPrefix","_near","authDataKey","authData","JSON","parse","window","localStorage","getItem","_networkId","config","networkId","_walletBaseUrl","walletUrl","contractName","_keyStore","connection","signer","keyStore","_authData","allKeys","_authDataKey","isSignedIn","_completeSignInWithAccessKey","accountId","getAccountId","requestSignIn","contractIdOrOptions","title","successUrl","failureUrl","options","deprecate","default","contractId","currentUrl","URL","location","href","newUrl","searchParams","set","contractAccount","account","state","accessKey","KeyPair","fromRandom","getPublicKey","toString","setKey","methodNames","forEach","methodName","append","assign","requestSignTransactions","Array","isArray","_requestSignTransactions","transactions","callbackUrl","meta","map","transaction","serialize","SCHEMA","serialized","Buffer","from","join","publicKey","get","split","setItem","stringify","_moveKeyFromTempToPermanent","delete","history","replaceState","document","keyPair","getKey","removeKey","signOut","removeItem","_connectedAccount","Account","walletConnection","signAndSendTransaction","_signAndSendTransaction","receiverId","actions","walletMeta","walletCallbackUrl","localKey","accessKeyForTransaction","Error","public_key","e","type","block","provider","finality","blockHash","baseDecode","header","hash","PublicKey","nonce","access_key","createTransaction","Promise","resolve","reject","setTimeout","accessKeyMatchesTransaction","permission","FunctionCall","receiver_id","allowedReceiverId","method_names","allowedMethods","includes","length","functionCall","deposit","accessKeys","getAccessKeys","find","key","walletKeys","indexOf"],"sources":["C:/Projects/node_modules/near-api-js/lib/wallet-account.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConnectedWalletAccount = exports.WalletAccount = exports.WalletConnection = void 0;\n/**\n * The classes in this module are used in conjunction with the {@link BrowserLocalStorageKeyStore}. This module exposes two classes:\n * * {@link WalletConnection} which redirects users to {@link https://docs.near.org/docs/tools/near-wallet | NEAR Wallet} for key management.\n * * {@link ConnectedWalletAccount} is an {@link Account} implementation that uses {@link WalletConnection} to get keys\n *\n * @module walletAccount\n */\nconst depd_1 = __importDefault(require(\"depd\"));\nconst account_1 = require(\"./account\");\nconst transaction_1 = require(\"./transaction\");\nconst utils_1 = require(\"./utils\");\nconst borsh_1 = require(\"borsh\");\nconst borsh_2 = require(\"borsh\");\nconst LOGIN_WALLET_URL_SUFFIX = '/login/';\nconst MULTISIG_HAS_METHOD = 'add_request_and_confirm';\nconst LOCAL_STORAGE_KEY_SUFFIX = '_wallet_auth_key';\nconst PENDING_ACCESS_KEY_PREFIX = 'pending_key'; // browser storage key for a pending access key (i.e. key has been generated but we are not sure it was added yet)\n/**\n * This class is used in conjunction with the {@link BrowserLocalStorageKeyStore}.\n * It redirects users to {@link https://docs.near.org/docs/tools/near-wallet | NEAR Wallet} for key management.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#wallet}\n * @example\n * ```js\n * // create new WalletConnection instance\n * const wallet = new WalletConnection(near, 'my-app');\n *\n * // If not signed in redirect to the NEAR wallet to sign in\n * // keys will be stored in the BrowserLocalStorageKeyStore\n * if(!wallet.isSingnedIn()) return wallet.requestSignIn()\n * ```\n */\nclass WalletConnection {\n    constructor(near, appKeyPrefix) {\n        this._near = near;\n        const authDataKey = appKeyPrefix + LOCAL_STORAGE_KEY_SUFFIX;\n        const authData = JSON.parse(window.localStorage.getItem(authDataKey));\n        this._networkId = near.config.networkId;\n        this._walletBaseUrl = near.config.walletUrl;\n        appKeyPrefix = appKeyPrefix || near.config.contractName || 'default';\n        this._keyStore = near.connection.signer.keyStore;\n        this._authData = authData || { allKeys: [] };\n        this._authDataKey = authDataKey;\n        if (!this.isSignedIn()) {\n            this._completeSignInWithAccessKey();\n        }\n    }\n    /**\n     * Returns true, if this WalletAccount is authorized with the wallet.\n     * @example\n     * ```js\n     * const wallet = new WalletConnection(near, 'my-app');\n     * wallet.isSignedIn();\n     * ```\n     */\n    isSignedIn() {\n        return !!this._authData.accountId;\n    }\n    /**\n     * Returns authorized Account ID.\n     * @example\n     * ```js\n     * const wallet = new WalletConnection(near, 'my-app');\n     * wallet.getAccountId();\n     * ```\n     */\n    getAccountId() {\n        return this._authData.accountId || '';\n    }\n    /**\n     * Redirects current page to the wallet authentication page.\n     * @param options An optional options object\n     * @param options.contractId The NEAR account where the contract is deployed\n     * @param options.successUrl URL to redirect upon success. Default: current url\n     * @param options.failureUrl URL to redirect upon failure. Default: current url\n     *\n     * @example\n     * ```js\n     * const wallet = new WalletConnection(near, 'my-app');\n     * // redirects to the NEAR Wallet\n     * wallet.requestSignIn({ contractId: 'account-with-deploy-contract.near' });\n     * ```\n     */\n    async requestSignIn(contractIdOrOptions = {}, title, successUrl, failureUrl) {\n        let options;\n        if (typeof contractIdOrOptions === 'string') {\n            const deprecate = depd_1.default('requestSignIn(contractId, title)');\n            deprecate('`title` ignored; use `requestSignIn({ contractId, methodNames, successUrl, failureUrl })` instead');\n            options = { contractId: contractIdOrOptions, successUrl, failureUrl };\n        }\n        else {\n            options = contractIdOrOptions;\n        }\n        const currentUrl = new URL(window.location.href);\n        const newUrl = new URL(this._walletBaseUrl + LOGIN_WALLET_URL_SUFFIX);\n        newUrl.searchParams.set('success_url', options.successUrl || currentUrl.href);\n        newUrl.searchParams.set('failure_url', options.failureUrl || currentUrl.href);\n        if (options.contractId) {\n            /* Throws exception if contract account does not exist */\n            const contractAccount = await this._near.account(options.contractId);\n            await contractAccount.state();\n            newUrl.searchParams.set('contract_id', options.contractId);\n            const accessKey = utils_1.KeyPair.fromRandom('ed25519');\n            newUrl.searchParams.set('public_key', accessKey.getPublicKey().toString());\n            await this._keyStore.setKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + accessKey.getPublicKey(), accessKey);\n        }\n        if (options.methodNames) {\n            options.methodNames.forEach(methodName => {\n                newUrl.searchParams.append('methodNames', methodName);\n            });\n        }\n        window.location.assign(newUrl.toString());\n    }\n    async requestSignTransactions(...args) {\n        if (Array.isArray(args[0])) {\n            const deprecate = depd_1.default('WalletConnection.requestSignTransactions(transactions, callbackUrl, meta)');\n            deprecate('use `WalletConnection.requestSignTransactions(RequestSignTransactionsOptions)` instead');\n            return this._requestSignTransactions({\n                transactions: args[0],\n                callbackUrl: args[1],\n                meta: args[2]\n            });\n        }\n        return this._requestSignTransactions(args[0]);\n    }\n    async _requestSignTransactions({ transactions, meta, callbackUrl }) {\n        const currentUrl = new URL(window.location.href);\n        const newUrl = new URL('sign', this._walletBaseUrl);\n        newUrl.searchParams.set('transactions', transactions\n            .map(transaction => borsh_2.serialize(transaction_1.SCHEMA, transaction))\n            .map(serialized => Buffer.from(serialized).toString('base64'))\n            .join(','));\n        newUrl.searchParams.set('callbackUrl', callbackUrl || currentUrl.href);\n        if (meta)\n            newUrl.searchParams.set('meta', meta);\n        window.location.assign(newUrl.toString());\n    }\n    /**\n     * @hidden\n     * Complete sign in for a given account id and public key. To be invoked by the app when getting a callback from the wallet.\n     */\n    async _completeSignInWithAccessKey() {\n        const currentUrl = new URL(window.location.href);\n        const publicKey = currentUrl.searchParams.get('public_key') || '';\n        const allKeys = (currentUrl.searchParams.get('all_keys') || '').split(',');\n        const accountId = currentUrl.searchParams.get('account_id') || '';\n        // TODO: Handle errors during login\n        if (accountId) {\n            this._authData = {\n                accountId,\n                allKeys\n            };\n            window.localStorage.setItem(this._authDataKey, JSON.stringify(this._authData));\n            if (publicKey) {\n                await this._moveKeyFromTempToPermanent(accountId, publicKey);\n            }\n        }\n        currentUrl.searchParams.delete('public_key');\n        currentUrl.searchParams.delete('all_keys');\n        currentUrl.searchParams.delete('account_id');\n        currentUrl.searchParams.delete('meta');\n        currentUrl.searchParams.delete('transactionHashes');\n        window.history.replaceState({}, document.title, currentUrl.toString());\n    }\n    /**\n     * @hidden\n     * @param accountId The NEAR account owning the given public key\n     * @param publicKey The public key being set to the key store\n     */\n    async _moveKeyFromTempToPermanent(accountId, publicKey) {\n        const keyPair = await this._keyStore.getKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + publicKey);\n        await this._keyStore.setKey(this._networkId, accountId, keyPair);\n        await this._keyStore.removeKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + publicKey);\n    }\n    /**\n     * Sign out from the current account\n     * @example\n     * walletAccount.signOut();\n     */\n    signOut() {\n        this._authData = {};\n        window.localStorage.removeItem(this._authDataKey);\n    }\n    /**\n     * Returns the current connected wallet account\n     */\n    account() {\n        if (!this._connectedAccount) {\n            this._connectedAccount = new ConnectedWalletAccount(this, this._near.connection, this._authData.accountId);\n        }\n        return this._connectedAccount;\n    }\n}\nexports.WalletConnection = WalletConnection;\nexports.WalletAccount = WalletConnection;\n/**\n * {@link Account} implementation which redirects to wallet using {@link WalletConnection} when no local key is available.\n */\nclass ConnectedWalletAccount extends account_1.Account {\n    constructor(walletConnection, connection, accountId) {\n        super(connection, accountId);\n        this.walletConnection = walletConnection;\n    }\n    // Overriding Account methods\n    /**\n     * Sign a transaction by redirecting to the NEAR Wallet\n     * @see {@link WalletConnection.requestSignTransactions}\n     */\n    signAndSendTransaction(...args) {\n        if (typeof args[0] === 'string') {\n            return this._signAndSendTransaction({ receiverId: args[0], actions: args[1] });\n        }\n        return this._signAndSendTransaction(args[0]);\n    }\n    async _signAndSendTransaction({ receiverId, actions, walletMeta, walletCallbackUrl = window.location.href }) {\n        const localKey = await this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);\n        let accessKey = await this.accessKeyForTransaction(receiverId, actions, localKey);\n        if (!accessKey) {\n            throw new Error(`Cannot find matching key for transaction sent to ${receiverId}`);\n        }\n        if (localKey && localKey.toString() === accessKey.public_key) {\n            try {\n                return await super.signAndSendTransaction({ receiverId, actions });\n            }\n            catch (e) {\n                if (e.type === 'NotEnoughAllowance') {\n                    accessKey = await this.accessKeyForTransaction(receiverId, actions);\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        const block = await this.connection.provider.block({ finality: 'final' });\n        const blockHash = borsh_1.baseDecode(block.header.hash);\n        const publicKey = utils_1.PublicKey.from(accessKey.public_key);\n        // TODO: Cache & listen for nonce updates for given access key\n        const nonce = accessKey.access_key.nonce + 1;\n        const transaction = transaction_1.createTransaction(this.accountId, publicKey, receiverId, nonce, actions, blockHash);\n        await this.walletConnection.requestSignTransactions({\n            transactions: [transaction],\n            meta: walletMeta,\n            callbackUrl: walletCallbackUrl\n        });\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                reject(new Error('Failed to redirect to sign transaction'));\n            }, 1000);\n        });\n        // TODO: Aggregate multiple transaction request with \"debounce\".\n        // TODO: Introduce TrasactionQueue which also can be used to watch for status?\n    }\n    /**\n     * Check if given access key allows the function call or method attempted in transaction\n     * @param accessKey Array of {access_key: AccessKey, public_key: PublicKey} items\n     * @param receiverId The NEAR account attempting to have access\n     * @param actions The action(s) needed to be checked for access\n     */\n    async accessKeyMatchesTransaction(accessKey, receiverId, actions) {\n        const { access_key: { permission } } = accessKey;\n        if (permission === 'FullAccess') {\n            return true;\n        }\n        if (permission.FunctionCall) {\n            const { receiver_id: allowedReceiverId, method_names: allowedMethods } = permission.FunctionCall;\n            /********************************\n            Accept multisig access keys and let wallets attempt to signAndSendTransaction\n            If an access key has itself as receiverId and method permission add_request_and_confirm, then it is being used in a wallet with multisig contract: https://github.com/near/core-contracts/blob/671c05f09abecabe7a7e58efe942550a35fc3292/multisig/src/lib.rs#L149-L153\n            ********************************/\n            if (allowedReceiverId === this.accountId && allowedMethods.includes(MULTISIG_HAS_METHOD)) {\n                return true;\n            }\n            if (allowedReceiverId === receiverId) {\n                if (actions.length !== 1) {\n                    return false;\n                }\n                const [{ functionCall }] = actions;\n                return functionCall &&\n                    (!functionCall.deposit || functionCall.deposit.toString() === '0') && // TODO: Should support charging amount smaller than allowance?\n                    (allowedMethods.length === 0 || allowedMethods.includes(functionCall.methodName));\n                // TODO: Handle cases when allowance doesn't have enough to pay for gas\n            }\n        }\n        // TODO: Support other permissions than FunctionCall\n        return false;\n    }\n    /**\n     * Helper function returning the access key (if it exists) to the receiver that grants the designated permission\n     * @param receiverId The NEAR account seeking the access key for a transaction\n     * @param actions The action(s) sought to gain access to\n     * @param localKey A local public key provided to check for access\n     * @returns Promise<any>\n     */\n    async accessKeyForTransaction(receiverId, actions, localKey) {\n        const accessKeys = await this.getAccessKeys();\n        if (localKey) {\n            const accessKey = accessKeys.find(key => key.public_key.toString() === localKey.toString());\n            if (accessKey && await this.accessKeyMatchesTransaction(accessKey, receiverId, actions)) {\n                return accessKey;\n            }\n        }\n        const walletKeys = this.walletConnection._authData.allKeys;\n        for (const accessKey of accessKeys) {\n            if (walletKeys.indexOf(accessKey.public_key) !== -1 && await this.accessKeyMatchesTransaction(accessKey, receiverId, actions)) {\n                return accessKey;\n            }\n        }\n        return null;\n    }\n}\nexports.ConnectedWalletAccount = ConnectedWalletAccount;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}